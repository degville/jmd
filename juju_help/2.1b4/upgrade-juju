Usage: juju upgrade-juju [options]

Summary:
Upgrades Juju on all machines in a model.

Options:
-B, --no-browser-login  (= false)
    Do not use web browser for authentication
--agent-version (= "")
    Upgrade to specific version
--build-agent  (= false)
    Build a local version of the agent binary; for development use only
--dry-run  (= false)
    Don't change anything, just report what would be changed
-m, --model (= "")
    Model to operate in. Accepts [<controller name>:]<model name>
--reset-previous-upgrade  (= false)
    Clear the previous (incomplete) upgrade status (use with care)
-y, --yes  (= false)
    Answer 'yes' to confirmation prompts

Details:
Juju provides agent software to every machine it creates. This command
upgrades that software across an entire model, which is, by default, the
current model.
A model's agent version can be shown with `juju model-config agent-
version`.
A version is denoted by: major.minor.patch
The upgrade candidate will be auto-selected if '--agent-version' is not
specified:
 - If the server major version matches the client major version, the
 version selected is minor+1. If such a minor version is not available then
 the next patch version is chosen.
 - If the server major version does not match the client major version,
 the version selected is that of the client version.
If the controller is without internet access, the client must first supply
the software to the controller's cache via the `juju sync-tools` command.
The command will abort if an upgrade is in progress. It will also abort if
a previous upgrade was not fully completed (e.g.: if one of the
controllers in a high availability model failed to upgrade).
If a failed upgrade has been resolved, '--reset-previous-upgrade' can be
used to allow the upgrade to proceed.
Backups are recommended prior to upgrading.

Examples:
    juju upgrade-juju --dry-run
    juju upgrade-juju --agent-version 2.0.1
    
See also: 
    sync-tools
